buildscript{
    repositories {
        mavenCentral()
        dependencies {
            classpath 'io.sealights.on-premise.agents.plugin:sealights-gradle-plugin:latest.release'
        }
    }
}
plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "org.asciidoctor.gradle.asciidoctor" version "1.5.1"
}

ext {
//tag::extGorm[]
    gormVersion = '6.1.9.RELEASE'
}

group = "com.virtualdogbert"
version = "1.0.M1"
description = "This library provides Grails conventions, over configuration, to Micronaut projects."

wrapper {
    gradleVersion = '4.10.2'
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

sourceSets {
    main.groovy.srcDir 'src'
}


dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.0'
    }
}

dependencies {
    compileOnly(
            'org.codehaus.groovy:groovy-all:2.5.4',
    )


    compileOnly "io.micronaut:micronaut-http-client"
    compileOnly "io.micronaut:micronaut-http-server-netty"
    compileOnly "io.micronaut:micronaut-runtime-groovy"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    compile "javax.inject:javax.inject:1"

    //tag::gorm[]
    compileOnly "io.micronaut.configuration:micronaut-hibernate-validator"
    compileOnly "io.micronaut.configuration:micronaut-hibernate-gorm"
    compileOnly "io.micronaut:micronaut-runtime:1.2.2"
    compile "io.micronaut:micronaut-http:1.2.2"
    compileOnly "io.micronaut:micronaut-core:1.2.2"
    compileOnly "io.micronaut:inject:1.0.0.RC2"
    compileOnly "org.grails:grails-datastore-gorm-hibernate5:$gormVersion"

      //end::gorm[]

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    testCompile(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.5.1',
    )
    testImplementation(
            'junit:junit:4.12',
            'org.junit.jupiter:junit-jupiter-api:5.4.2'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.4.2',
            'org.junit.vintage:junit-vintage-engine:5.4.2'
    )


}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

ext {
    theTitle = 'Micro Grails'
    titleForDocumentation = archivesBaseName + ' ' + version
    packageTitle = group
    description = description
}

task jarDoc(type: Jar, dependsOn: [javadoc, groovydoc]) {
    classifier = 'javadoc'
    from docsDir
}

javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    include 'com/virtualdogbert/**'
}



publishing {
    publications {
        groovyMaven(MavenPublication) {
            from components.java

            artifact(sourceJar) {
                classifier "sources"
            }

            artifact jarDoc {
                classifier = 'javadoc'
            }
        }


    }
}

task jarSrc(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(jarSrc)
    archives(jarDoc)
}


bintray {

    user = getPropertyOrUseDefault("bintrayUser", "fake_user")
    key = getPropertyOrUseDefault("bintrayKey", "fake_key")
    publications = ['groovyMaven']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'maven'
        name = 'micro-grails'
        desc = 'This library provides Grails like conventions to Micronaut projects'
        issueTrackerUrl = "https://github.com/virtualdogbert/micro-grails/issues"
        vcsUrl = "https://github.com/virtualdogbert/micro-grails/"
        websiteUrl = "https://virtualdogbert.github.io/micro-grails"
        licenses = ['Apache-2.0']
    }
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        'front-cover-image' : 'image:cover.png[Front Cover,800,600]',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs')
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML') {
    backends 'html5'
}

task docs(dependsOn: [asciidoc]) {

    File dir = new File(buildDir, 'docs')

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.png'
    }
}

test {
    useJUnitPlatform()
}
allprojects { p ->
    apply plugin: 'io.sealights.on-premise.agents.plugin.sealights-gradle-plugin'
    sealights {
            token = System.getenv('SL_TOKEN')
        createBuildSessionId = false
          buildSessionId = System.getenv('SL_BUILD_SESSION_ID')

        filesStorage="/tmp"
        includeResources=true
//        buildScannerJar = "c:\\java-biuild-agent\\without-enrich.jar"
        logEnabled = false
        logLevel = "off"
        logToFile = false
        logToConsole = true

//          runTestOnly=true
          testTasks=["test", "junitPlatformTest", "integrationTest"]
//          filesIncluded="*sample*"
//          filesExcluded="*sample*"
//        proxy = "http://localhost:8888"
          sealightsJvmParams=["sl.enableUpgrade":"false"]
        buildScannerParams=["sourcePath":"src/main/groovy"]
//          testListenerJvmParams=["sl.param1":"true","sl.param2":"value"]
    }
}